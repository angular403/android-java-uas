<resources>
    <string name="data">Data Pribadi</string>
    <string name="data2">Mahasiswa Stmik Mercusuar-Bekasi</string>
    <string name="data3">Nama          :   Andrew Napitupulu</string>
    <string name="data4">Nim           :   1655201056</string>
    <string name="data5">Prodi         :   Teknik Informatika</string>
    <string name="data6">Motivasi       :   Sukses Dunia Dan Akhirat</string>

    <string name="app_name">NEFFEX SQUARE</string>

    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="action_settings">Settings</string>
    <string name="no_content">No Content Available</string>
    <string name="foo">Lorem Ipsum</string>

    <!-- Admob ID -->
    <string name="banner_ad_unit_id">ca-app-pub-2579754990350876/5557071144</string>
    <string name="interstitial_ad_unit_id">ca-app-pub-2579754990350876/7033804340</string>
    <string name="title_activity_details">DetailsActivity</string>

    <!--GoogleDrive-->
    <string name="main_title">Video from URL example</string>
    <string name="main_replay">Replay</string>

    <string name="action_downloading_url">Downloading URL…</string>
    <string name="action_start_video">Starting video…</string>

    <string name="error_failed_connecting">Failed to connect with the server</string>

    <!--Youtube-->
    <string name="player_error">Error initializing YouTube player: %s</string>
    <string name="seek_to">Jump To</string>
    <string name="seek_to_hint">Seconds</string>
    <string name="title_activity_scrolling">ScrollingActivity</string>
    <string name="small_text">
        " "Sebagai developer untuk memasuki dunia industri tentunya memiliki tantangannya sendiri yang semakin hari semakin kompleks permintaannya, dengan kondisi yang dinamis permintaan industri yang menuntut kita untuk bergeser ke tools dan bahasa pemrograman yang populer dan banyak digunakan.

Bahkan jika dibayangkan coders, dahulu dengan satu bahasa pemrograman saja yang digunakan programmer dapat menyelesaikan sebuah aplikasi tetapi tidak dengan sekarang, programmer dituntut untuk tahu berbagai teknologi dari berbagai platform yang akan berdampak pada si programmernya dalam menyelesaikan pekerjannya dengan baik.

Apa yang dimaksud dengan Full-Stack Developer ?
Pernahkan sahabat coders bekerja pada suatu bahasa pemrograman misalnya kita akan membuat sebuah tampilan website dengan menggunakan bahasa pemrograman html, selain kita membuat kerangka websitenya ternyata kita juga harus bisa membuat desain atau tampilannya bisa kita menggunakan software editing photo dan juga kita haru mengkonversikan desain tersebut ke dalam bentuk kode front-end. Dengan demikian inilah yang sering diistilahan Full-Stack Developer.

Istilah full-stack developer berarti developer yang nyaman bekerja dengan teknologi back-end dan front-end. Lebih spesifik lagi, developer bisa bekerja dengan database, PHP, HTML, CSS, javascript dan juga bisa mengkonversi desain software editing photo ke kode front-end.

Apakah seorang Full-Stack developer harus menguasai semua hal dan teknologi ?
Untuk menjadi seorang full-stack developer tidak harus menguasai semua hal dan teknologi yang dia perlukan untuk bekerja, karena itu suatu hal yang mustahil. Dia hanya perlu merasa nyaman bekerja dengan teknologi-teknologi tersebut dan itu cukup banyak untuk dipelajari.

Baca juga: Teknologi Pemrograman Paling Popular Digunakan Developer Tahun 2016

Teknologi yang diperlukan Full-Stack Developer
Baiklah coders, mari kita bahas satu per satu teknologi utama apa saja yang diperlukan full-stack developer sekarang untuk bekerja :

System Administration
Linux dan basic shell scripting
Cloud computing: Amazon, Rackspace, etc.
Background processing: Gearman, Redis
Search: Elasticsearch, Sphinx, Solr
Caching: Varnish, Memcached, APC / OpCache
Monitoring: Nagios
Linux digunakan di sebagian besar Internet, secara umum menjadi sistem operasi di pengembangan web, seorang full-stack developer sebaiknya tahu cara kerja cloud hosting seperti Amazon, Rackspace, atau penyedia lainnya, beserta API-nya.

Pencarian menjadi bagian yang tidak terpisahkan di sebagian website. Seorang developer sebaiknya harus tahu cara menyiapkan dan menggunakan server pencarian seperti sphinx atau elasticsearch.

Caching juga penting, seperti Varnish, reverse proxy, Memcached, dan opcode caching. Developer harus tahu hal-hal tersebut dan bagaimana cara menggunakannya.

Web Development Tools
Version control: Git, Mercurial, SVN
Virtualisasi: VirtualBox, Vagrant, Docker
Sekarang, sudah menjadi hal yang wajib untuk menggunakan version control, meskipun coders adalah solo web developer. Dengan didukung virtualisasi, mempunyai banyak lingkungan pengembangan per proyek sangat bagus untuk dimiliki dan sangat mudah untuk mengaturnya dengan VirtualBox dan Vagrant. Jika ingin bekerja dengan Vagrant, developer juga harus tahu sintaks dasar dari Ruby dan skrip shell.

Back-End Tech
Web servers: Apache, Nginx
Programming language: PHP, NodeJS, Ruby
Database: MySQL, MongoDB, Cassandra, Redis, SQL / JSON secara umum.
Apache  Nginx adalah web server yang banyak digunakan oleh web developer. Seorang full-stack developer harus tahu cara mengatur aplikasi-aplikasi ini untuk melayani konten websitenya.

PHP hal yang harus dikuasai di tingkat tinggi, sementara NodeJS, Ruby baik juga untuk diketahui.

Baca juga: Tips Memilih Bahasa Pemrograman Backend untuk Dipelajari

Sebagai tambahan, manajemen basisdata juga menjadi syarat untuk seorang web developer. Perbedaan database relasional (seperti MySQL, PostgreSQL) vs non-relasional database (MongoDB, Redis, Casandra) adalah hal yang perlu diketahui, selain sintaks XML/JSON.

Front-End Tech
HTML / HTML5: Semantic web
CSS / CSS3: LESS, SASS, Media Queries
JavaScript: jQuery, AngularJS, Knockout, etc.
Compatibility quirks across browsers
Responsive design
AJAX, JSON, XML, WebSocket
Metodologi dan framework baru terus bermunculan tiap hari, mulai dari MVC, MVVM, MVP, Angular, Knockout, Ember, dll.

Selain HTML, CSS, JAvascript, seorang full stack developer sebaiknya harus tahu tentang responsive web design dan bagaimana bekerja dengan media queries dan CSS preprocessors seperti LESS dan SASS.

Komunikasi dengan back-end via AJAX atau WebSocket juga penting untuk dipelajari.

Design
Converting website design into front-end code
UI
UX
Selain teknologi front-end, seorang full-stack developer juga harus paham apa yang mungkin bisa dibuat dan apa yang tidak dengan keterbatasan akan HTML/CSS/Javsacript dan menkonversi desain dari file software editing photo.

Dengan banyaknya teknologi yang telah disebutkan diatas, developer bisa saja tidak harus menggunakannya, seperti Ruby atau lebih spesifik lagi pustaka Javascript. Akan tetapi, semua hal tersebut saling berhubungan dengan yang lain satu sama lain.

Sebagai contoh, jika kita ingin menyiapkan Vagrant, kita harus tahu sintaks Ruby. Jika kita ingin memanipulasi elemen DOM, Jquery menjadi hal yang wajib dipelajari.

android dan ios (by feridi codepolitan)

Kategori lain yang perlu disebutkan adalah mobile technologies. Mobile technologies merupakan industri yang sangat dinamis dan sangat erat kaitannya dengan web development:

iOS
Android
Hybrid: Phonegap, Appcelerator
Salah satu disparitas terbesar saat ini adalah antara pengembangan web dan mobile. Tetapi perbedaan tersebut semakin hari semakin tidak ada. Seorang full stack developer sebaiknya juga tahu akan teknologi ini.

Apakah lebih baik menjadi seorang Full-Stack Developer ?
Jika coders ingin menjadi seorang full-stack developer berarti harus mempunyai pikiran yang terbuka akan teknologi baru, harus bisa menggunakan setiap teknologi yang telah disebutkan diatas, dan harus mengerti bagaimana sebuah aplikasi dibuat, mulai dari konsep hingga menjadi produk jadi.

Baca juga: Mencoba Banyak Bahasa Pemrograman atau Menguasai Beberapa Saja?

Ide seorang "full-stack developer" bukan berarti harus ahli, terbiasa akan semua teknologi yang ada karena spesialisasi ada untuk alasan tersebut. "full-stack developer" lebih kepada pengertian akan setiap area dan teknologi yang telah disebutkan diatas, bisa berkomunikasi dengan baik dengan rekan kerja, dan bisa menjadi aset yang berguna jika memang situasi memerlukan akan pengetahuan tersebut.

*)untuk teknologi yang disebutkan diatas tidak terbatas pada yang telah disampaikan Sumber : Being a Full Stack Developer""
    </string>
    <string name="title_activity_scrolling_picture">ScrollingActivityPicture</string>
    <string name="large_text">
        "Material is the metaphor.\n\n"

        "A material metaphor is the unifying theory of a rationalized space and a system of motion."
        "The material is grounded in tactile reality, inspired by the study of paper and ink, yet "
        "technologically advanced and open to imagination and magic.\n"
        "Surfaces and edges of the material provide visual cues that are grounded in reality. The "
        "use of familiar tactile attributes helps users quickly understand affordances. Yet the "
        "flexibility of the material creates new affordances that supercede those in the physical "
        "world, without breaking the rules of physics.\n"
        "The fundamentals of light, surface, and movement are key to conveying how objects move, "
        "interact, and exist in space and in relation to each other. Realistic lighting shows "
        "seams, divides space, and indicates moving parts.\n\n"

        "Bold, graphic, intentional.\n\n"

        "The foundational elements of print based design typography, grids, space, scale, color, "
        "and use of imagery guide visual treatments. These elements do far more than please the "
        "eye. They create hierarchy, meaning, and focus. Deliberate color choices, edge to edge "
        "imagery, large scale typography, and intentional white space create a bold and graphic "
        "interface that immerse the user in the experience.\n"
        "An emphasis on user actions makes core functionality immediately apparent and provides "
        "waypoints for the user.\n\n"

        "Motion provides meaning.\n\n"

        "Motion respects and reinforces the user as the prime mover. Primary user actions are "
        "inflection points that initiate motion, transforming the whole design.\n"
        "All action takes place in a single environment. Objects are presented to the user without "
        "breaking the continuity of experience even as they transform and reorganize.\n"
        "Motion is meaningful and appropriate, serving to focus attention and maintain continuity. "
        "Feedback is subtle yet clear. Transitions are efﬁcient yet coherent.\n\n"

        "3D world.\n\n"

        "The material environment is a 3D space, which means all objects have x, y, and z "
        "dimensions. The z-axis is perpendicularly aligned to the plane of the display, with the "
        "positive z-axis extending towards the viewer. Every sheet of material occupies a single "
        "position along the z-axis and has a standard 1dp thickness.\n"
        "On the web, the z-axis is used for layering and not for perspective. The 3D world is "
        "emulated by manipulating the y-axis.\n\n"

        "Light and shadow.\n\n"

        "Within the material environment, virtual lights illuminate the scene. Key lights create "
        "directional shadows, while ambient light creates soft shadows from all angles.\n"
        "Shadows in the material environment are cast by these two light sources. In Android "
        "development, shadows occur when light sources are blocked by sheets of material at "
        "various positions along the z-axis. On the web, shadows are depicted by manipulating the "
        "y-axis only. The following example shows the card with a height of 6dp.\n\n"

        "Resting elevation.\n\n"

        "All material objects, regardless of size, have a resting elevation, or default elevation "
        "that does not change. If an object changes elevation, it should return to its resting "
        "elevation as soon as possible.\n\n"

        "Component elevations.\n\n"

        "The resting elevation for a component type is consistent across apps (e.g., FAB elevation "
        "does not vary from 6dp in one app to 16dp in another app).\n"
        "Components may have different resting elevations across platforms, depending on the depth "
        "of the environment (e.g., TV has a greater depth than mobile or desktop).\n\n"

        "Responsive elevation and dynamic elevation offsets.\n\n"

        "Some component types have responsive elevation, meaning they change elevation in response "
        "to user input (e.g., normal, focused, and pressed) or system events. These elevation "
        "changes are consistently implemented using dynamic elevation offsets.\n"
        "Dynamic elevation offsets are the goal elevation that a component moves towards, relative "
        "to the component’s resting state. They ensure that elevation changes are consistent "
        "across actions and component types. For example, all components that lift on press have "
        "the same elevation change relative to their resting elevation.\n"
        "Once the input event is completed or cancelled, the component will return to its resting "
        "elevation.\n\n"

        "Avoiding elevation interference.\n\n"

        "Components with responsive elevations may encounter other components as they move between "
        "their resting elevations and dynamic elevation offsets. Because material cannot pass "
        "through other material, components avoid interfering with one another any number of ways, "
        "whether on a per component basis or using the entire app layout.\n"
        "On a component level, components can move or be removed before they cause interference. "
        "For example, a floating action button (FAB) can disappear or move off screen before a "
        "user picks up a card, or it can move if a snackbar appears.\n"
        "On the layout level, design your app layout to minimize opportunities for interference. "
        "For example, position the FAB to one side of stream of a cards so the FAB won’t interfere "
        "when a user tries to pick up one of cards.\n\n"
    </string>

</resources>
